[
  {
    "type": "structure",
    "diagrams": [
      {
        "id": "class",
        "title": "Diagramme de classe",
        "description": "Le diagramme de sert à décrire la structure logique d'un système en la représentant sous forme de classes et de relations entre les classes",
        "elements": [
          {
            "name": "Classe",
            "url": "uneimage.jpg",
            "explanation":"Une classe est représentée par un rectangle séparé en trois parties : Le nom de la classe, ses attributs et ses méthodes. Les attributs et les méthodes représentent le comportement de la classe"
          },
          {
            "name": "Visibilité Public",
            "url": "uneimage.jpg",
            "explanation":"Indique si un attribut ou une méthode est publique"
          },
          {
            "name": "Visibilité Privée",
            "url": "uneimage.jpg",
            "explanation":"Indique si un attribut ou une méthode est privée"
          },
          {
            "name": "Relation d'Association",
            "url": "uneimage.jpg",
            "explanation":"Relation entre deux classes qui décrit les connexions entre leurs instances"
          },
          {
            "name": "Relation d'Héritage",
            "url": "uneimage.jpg",
            "explanation": " L’héritage est la relation entre une classe fille qui hérite des attributs et méthodes d’une classe mère. La flèche va de la fille vers la mère. Les classes abstraites sont représentée avec un titre en italique"
          },
          {
            "name": "Relation d'Agrégation",
            "url": "uneimage.jpg",
            "explanation": "Une agrégation représente une relation où une classe dépend d’une autre, mais si cette dernière est détruite, la première ne le sera pas."
          },
          {
            "name": "Relation de Composition",
            "url": "uneimage.jpg",
            "explanation": "Une composition représente une relation où une classe dépend d’autre, et si cette dernière est détruite, les autres le sont aussi."
          },
          {
            "name": "Relation de Dépendance",
            "url": "uneimage.jpg",
            "explanation": "Une dépendance est relation unidirectionnelle entre deux classes. Elle indique que la modification de la cible peut impliquer une modification de la source."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "object",
        "title": "Diagramme d'objet",
        "description": "Un diagramme d’objet représente une instance spécifique d’un diagramme de classes à un moment précis. Il peut être utilisé pour illustrer le modèle de classe en montrant un exemple qui explique le modèle.",
        "elements": [
          {
            "name": "Classe",
            "url": "uneimage.jpg",
            "explanation":"Une classe est représentée par un rectangle séparé en trois parties : Le nom de la classe, ses attributs et ses méthodes. Les attributs et les méthodes représentent le comportement de la classe"
          },
          {
            "name": "Visibilité Public",
            "url": "uneimage.jpg",
            "explanation":"Indique si un attribut ou une méthode est publique"
          },
          {
            "name": "Visibilité Privée",
            "url": "uneimage.jpg",
            "explanation":"Indique si un attribut ou une méthode est privée"
          },
          {
            "name": "Relation d'Association",
            "url": "uneimage.jpg",
            "explanation":"Relation entre deux classes qui décrit les connexions entre leurs instances"
          },
          {
            "name": "Relation d'Héritage",
            "url": "uneimage.jpg",
            "explanation": " L’héritage est la relation entre une classe fille qui hérite des attributs et méthodes d’une classe mère. La flèche va de la fille vers la mère. Les classes abstraites sont représentée avec un titre en italique"
          },
          {
            "name": "Relation d'Agrégation",
            "url": "uneimage.jpg",
            "explanation": "Une agrégation représente une relation où une classe dépend d’une autre, mais si cette dernière est détruite, la première ne le sera pas."
          },
          {
            "name": "Relation de Composition",
            "url": "uneimage.jpg",
            "explanation": "Une composition représente une relation où une classe dépend d’autre, et si cette dernière est détruite, les autres le sont aussi."
          },
          {
            "name": "Relation de Dépendance",
            "url": "uneimage.jpg",
            "explanation": "Une dépendance est relation unidirectionnelle entre deux classes. Elle indique que la modification de la cible peut impliquer une modification de la source."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "composite",
        "title": "Diagramme de structure composite",
        "description": "Le diagramme de structure composite expose la structure interne d’une classe, et les relation qu’elle peut avoir avec les autres classe",
        "elements": [
          {
            "name": "Classificateur",
            "url": "uneimage.jpg",
            "explanation": "Elément de modèle qui décrit des caractéristiques structurelles et comportementales."
          },
          {
            "name": "Port",
            "url": "uneimage.jpg",
            "explanation": "Point d’interaction entre le classificateur et son environnement, entre le classificateurs et ses parties internes (les ports correspondent à des méthodes)"
          },
          {
            "name": "Parties",
            "url": "uneimage.jpg",
            "explanation": "Permet de définir une zone bien délimitée à l’intérieur d’une classe ou d’un composant. Les parties peuvent être connectées aux autres parties ou port, soit directement, soit via un port situé à l’extérieur de la partie."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "composant",
        "title": "Diagramme de composants",
        "description": "Diagramme de composants est essentiellement un diagramme de classes qui met l’accent sur les composants systèmes. Il décrit les composants et leurs dépendances dans l’environnement.",
        "elements": [
          {
            "name": "Composant",
            "url": "uneimage.jpg",
            "explanation" : "Un composant est un élément physique qui représente une parti d’un système, par exemple du code, un script, un fichier de données, une table…"
          },
          {
            "name": "Interface",
            "url": "uneimage.jpg",
            "explanation" : "Les interfaces peuvent être implémentée par le composant (réalisée par le composant, par un de ses classificateurs, ou fourni par un port public. Il peut aussi nécessiter une interface (soit tout le composant, soit un de ses classificateurs soit un de ses ports publics). Une interface peut être requise ou implémentée."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "package",
        "title": "Diagramme de paquetages",
        "description": "Un paquetage est une collection d’éléments du modèle : il peut contenir les collections des Uses Cases ou des classes et les relations qui les lient entre eux.Les paquetage peuvent être utilisés dans n’importe quelle vue ou diagramme UML Un paquetage et un espace de nom qui peut posséder des interfaces. Il peut exister des dépendances entre les paquetages et entre les éléments d’un même paquetage. Le diagramme de paquetage sert à organiser les fonctionnalités et à avoir une vision claire des dépendances.",
        "elements": [
          {
            "name": "access",
            "url": "uneimage.jpg",
            "explanation": "Tout élément public de B est accessible par son complet depuis A; Les éléements de A ont accès aux éléments public de B."
          },
          {
            "name": "import",
            "url": "uneimage.jpg",
            "explanation": "Tout élément public de B est accessible par son nom depuis A, 'comme si' les éléments de B étaient dans A."
          },
          {
            "name": "use",
            "url": "uneimage.jpg",
            "explanation": "Il existe au moins un élément de A qui a besoin d'un élément de B."
          },
          {
            "name": "merge",
            "url": "uneimage.jpg",
            "explanation": "Le contenu du package 1 fusionne avec celui de B (équivaut à une généralisation, B est le package 'père'"
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "deploy",
        "title": "Diagramme de déploiement",
        "description": "LE diagramme de déploiement présente la structure du système lors de son exécution. C’est un graphe de noeuds connectés par des associations qui représente la communication. Les noeuds peuvent contenir des instances de composant (indique que le composant vit et s'exécute dans le noeud, les composants peuvent contenir des objets, et les composants sont connectés les uns autres par des relations de dépendances.",
        "elements": [
          {
            "name": "Noeud",
            "url": "uneimage.jpg",
            "explanation": "Un noeud est un élément physique qui existe pendant l'exécution. Il a un nom qui permet de le distinguer des autres et peut être associé à un stéréotype qui permet de distinguer"
          },
          {
            "name": "Composant",
            "url": "uneimage.jpg",
            "explanation" : "Un composant est un élément physique qui représente une parti d’un système, par exemple du code, un script, un fichier de données, une table…"
          },
          {
            "name": "Relation de Dépendance",
            "url": "uneimage.jpg",
            "explanation": "Une dépendance est relation unidirectionnelle entre deux classes. Elle indique que la modification de la cible peut impliquer une modification de la source."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "profil",
        "title": "Diagramme de profils",
        "description": "Un profil peut définir des classes, des stéréotypes, des valeurs, des contraintes. Il permet d’introduire nos propres éléments et stéréotypes. Une méta-classe est un profil de classe qui peut être étendu par des stéréotypes. Un stéréotypes est un profil de classe qui précise de quelle manière une méta-classe peut être étendue",
        "elements": [
          {
            "name": "Profil",
            "url": "uneimage.jpg",
            "explanation": "Classificateur nommé qui regroupe toutes les particularités décrites"
          },
          {
            "name": "Méta-classe",
            "url": "uneimage.jpg",
            "explanation": "Profil de classe qui peut être étendu par des stéréotypes"
          },
          {
            "name": "Stéréotypes",
            "url": "uneimage.jpg",
            "explanation": "Un stéréotype est un profil de classe qui précise de quelle manière une méta-classe peut être étendue"
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      }
    ]
  },
  {
    "type": "comportement",
    "diagrams": [
      {
        "id": "usecase",
        "title": "Diagramme de cas d'utilisation",
        "description": "Le diagramme de cas d'utilisation décrit sous forme d'actions et de réaction le comportement d'un système du point de vue d'un utilisateur.. Il sert à modéliser les aspects d'un système, en montrant les acteurs et les fonctions offertes.",
        "elements": [
          {
            "name": "Système",
            "url": "uneimage.jpg",
            "explanation": "Représente le système de l'application présentée dans le diagramme"
          },
          {
            "name": "Acteur",
            "url": "uneimage.jpg",
            "explanation": "Les acteurs peuvent être humain, logiciel ou matériel. Il peut jouer plusieurs rôles. Il peut y avoir des acteurs principaux et secondaires, et un acteur peut être une spécialisation d'un autre acteur"
          },
          {
            "name": "Cas d'utilisation",
            "url": "uneimage.jpg",
            "explanation": "Le cas d'utilisation est une action qui peut effectuer le système. Il peut être une action de l'utilisation, ou une réaction à un autre cas d'utilisation."
          },
          {
            "name": "Relation d'inclusion",
            "url": "uneimage.jpg",
            "explanation": "Une relation d'inclusion est une relation de dépendance forte entre deux actions. L'action vers laquelle le pointeur est dirigé ne peut être effectuée qui si l'action d'où le pointeur prend son origine à été réalisée."
          },
          {
            "name": "Relation d'exclusion",
            "url": "uneimage.jpg",
            "explanation": "Une relation d'exclusion est relation de dépendance faible entre deux actions. L'action vers laquelle le pointeur est dirigée peut être effectuée à partir de l'action d'où le pointeur prend son origine, mais n'est pas obligatoire."
          },
          {
            "name": "Relation d'héritage",
            "url": "uneimage.jpg",
            "explanation": "Utilisée entre les acteurs, cette relation permet de définir une spécialisation d'un acteur par rapport à l'acteur dont il hérite."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "activity",
        "title": "diagramme d'activité'",
        "description": "Le diagramme d’activité permet de décrire la logique procédurale d’une activité : modélisation des processus métier, modélisation des workflows. Il prend aussi en charge les comportements parallèles. Les diagrammes d’activité indique ce qui se passe mais ne précise pas qui fait quoi : aucune classe n’est désignée.",
        "elements": [
          {
            "name": "Etat initial",
            "url": "uneimage.jpg",
            "explanation":"L'état initial indique le point de départ de l'activité"
          },
          {
            "name": "Etat final",
            "url": "uneimage.jpg",
            "explanation":"L'état final indique le point de fin de l'activité"
          },
          {
            "name": "Action",
            "url": "uneimage.jpg",
            "explanation":"Une action est un élément représentant une partie de l'activité"
          },
          {
            "name": "Transition",
            "url": "uneimage.jpg",
            "explanation":"La transition symbolise le passage d'une action à une autre. Les transitions peuvent être séquentielle (une action se termine une autre commence) ou conditionnée à une contrainte (indiquée en texte sur le symbole de la transtion)."
          },
          {
            "name": "Selon ou Si",
            "url": "uneimage.jpg",
            "explanation":"Selon (ou Si) sert à faire le lien entre une action, et les actions dont les transitions sont conditionnées à une contrainte."
          },
          {
            "name": "Synchronisation",
            "url": "uneimage.jpg",
            "explanation":"Une synchronisition peut être de deux type : conjonction (en entrée) ou disjonction (en sortie). Les actions comprises entre une conjonction et une disjonction doivent toutes avoir été réalisées pour passer à l'action suivante."
          },
          {
            "name": "Itération",
            "url": "uneimage.jpg",
            "explanation":"L'itération est une transition qui pointe vers une action qui a déjà été effectuée, et qui prend son origine sur un Selon. Elle sert à représenter la répétition possible de certaines sequences du diagramme."
          },
          {
            "name": "Rôle",
            "url": "uneimage.jpg",
            "explanation":"Les rôles permettent de décrire les acteurs qui effectueront certaines actions."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "statetransition",
        "title": "Diagramme d'état-transition",
        "description": "Il décrit l’enchaînement de tous les états d’un objet. Il est propre à une classe donnée, il décrit les états des objets de cette classe, les événements auxquels ils réagissent, les transitions qu’ils effectuent. ",
        "elements": [
          {
            "name": "Etat initial",
            "url": "uneimage.jpg",
            "explanation":"L'état initial indique le point de départ de l'activité"
          },
          {
            "name": "Etat final",
            "url": "uneimage.jpg",
            "explanation":"L'état final indique le point de fin de l'activité"
          },
          {
            "name": "Etat",
            "url": "uneimage.jpg",
            "explanation":"L'état d'un objet est défini par les valeurs de ses attributs. Il dépend de l'état précédent et de l'événement survenue"
          },
          {
            "name": "Transition",
            "url": "uneimage.jpg",
            "explanation":"La transition symbolise le passage d'un état à un autre. On indique en texte l'événement qui fait passer l'objet d'un état à un autre"
          },
          {
            "name": "Action et Activité",
            "url": "uneimage.jpg",
            "explanation":"Les activités permettent d'affiner l'état d'un objet en fonction d'une opération. l'action préfixe l'activité ('entry/, 'exit/', 'do/', 'nom_event/') afin de précision quel type d'action modifie l'état. "
          },
          {
            "name": "Point de jonction",
            "url": "uneimage.jpg",
            "explanation":"Le point de jonction permet de représenter des partage de transition entre deux états."
          },
          {
            "name": "Etat composite",
            "url": "uneimage.jpg",
            "explanation":"L'état composite est un état qui contient d'autres sous états"
          },
          {
            "name": "Le pseudo état historique",
            "url": "uneimage.jpg",
            "explanation":"Une transition ayant pour cible l’état historique est équivalente à une transition ayant pour cible le dernier état visité dans la région contenant pseudo-état historique."
          },
          {
            "name": "Etat concurrent",
            "url": "uneimage.jpg",
            "explanation":"L'état concurrent exprime la possibilité d'un objet a se trouver dans plusieurs états"
          },
          {
            "name": "Transition concurrente",
            "url": "uneimage.jpg",
            "explanation":"La transition concurrente peut être de type conjonction (en entrée) ou disjonction (en sortie). Elle se positionne en début et fin d'un état concurrent."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "sequence",
        "title": "Diagramme de séquence",
        "description": "Le diagramme de séquence permet de représenter les interaction entre objets, acteurs et instances d’objet en précisant la chronologie des échanges entre chacun. Il représente une instance (les scénarios possibles) d’un cas d’utilisation.",
        "elements": [
          {
            "name": "Objet",
            "url": "uneimage.jpg",
            "explanation": "Représentation d'un objet jouant un rôle dans une instance de cas l'utilisation"
          },
          {
            "name": "Ligne de vie",
            "url": "uneimage.jpg",
            "explanation": "Représente la durée de vie d'un objet dans la séquence."
          },
          {
            "name": "Période d'activité",
            "url": "uneimage.jpg",
            "explanation": "La période d’activité correspond an temps pendant lequel un objet fait une action."
          },
          {
            "name": "Message Synchrone",
            "url": "uneimage.jpg",
            "explanation": "Le message est orienté de l'emetteur au recepteur, et déclenche une opération. Il bloque l'emetteur jusqu'à la prise en compte du message par le recepteur."
          },
          {
            "name": "Message Asynchrone",
            "url": "uneimage.jpg",
            "explanation": "Le message est orienté de l'emetteur au recepteur, et déclenche une opération. Il n'interrompt pas l'exécution de l'emetteur."
          },
          {
            "name": "Message reflexif",
            "url": "uneimage.jpg",
            "explanation": "Un message reflexif est un message qu'un objet envoie à lui-même."
          },
          {
            "name": "Destruction",
            "url": "uneimage.jpg",
            "explanation": "Exprime la destruction d'un objet après la reception d'un message."
          },
          {
            "name": "Cadre d'interaction",
            "url": "uneimage.jpg",
            "explanation": "Le cadre d'interaction permet de tester un échange de message en fonction d'un opérateur. Il existe 12 opérateurs, les opérateurs fondamentaux sont 'opt' (indique si une séquence peut se produire ou non), 'alt' (une seule des séquences peut se produire) et 'loop' (permet de répéter un fragment un certain nombre de fois en fonction d'une condition)"
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "communication",
        "title": "Diagramme de communication",
        "description": "Le diagramme de communication représente les interactions entre les objets et les relations permettant ces interactions. Il est créé à partir du diagramme de séquence",
        "elements": [
          {
            "name": "Objet",
            "url": "uneimage.jpg",
            "explanation": "Représentation d'un objet jouant un rôle dans le diagramme de séquence. Les objets peuvent être créés ou détruits au cous d'un interface, et porter respectivement les stéréotypes <<créé>> ou <<détruit>>."
          },
          {
            "name": "Message ",
            "url": "uneimage.jpg",
            "explanation": "Le message est orienté de l'emetteur au recepteur, et déclenche une opération. Les messages sont numérotés pour organiser l'ordre d'exécution."
          },
          {
            "name": "Acteur",
            "url": "uneimage.jpg",
            "explanation": "Les acteurs peuvent être humain, logiciel ou matériel."
          },
          {
            "name": "Contrainte",
            "url": "uneimage.jpg",
            "explanation": "Un message peut être préfixé par une contrainte pour définir son cadre d'exécution."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "time",
        "title": "Le diagramme de temps",
        "description": "Le diagramme de temps présente le comportement des objets et leur changement d'état à travers d'une période de temps. Le temps s'écoule de la gauche vers la droite.",
        "elements": [
          {
            "name": "Ligne de vie",
            "url": "uneimage.jpg",
            "explanation": "Représente la vie d'un objet"
          },
          {
            "name": "Etat",
            "url": "uneimage.jpg",
            "explanation": "Indique l'état d'un objet."
          },
          {
            "name": "Durée",
            "url": "uneimage.jpg",
            "explanation": "Permet d'exprimer une durée de spécifique à un état de l'objet."
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      },
      {
        "id": "interactivity",
        "title": "Diagramme d'intéractivité'",
        "description": "Le diagramme d'interactivité est utilisé pour la représentation de système complexe. Il s'agit d'un variante du diagramme d'activité qui permet une vue d'ensemble des flux de contrôle. Les noeuds sont des diagrammes de séquence et des diagrammes d'activité. Les éléments constitutifs sont les mêmes que ces derniers.",
        "elements": [
          {
            "name": "le nom de l'élement",
            "url": "uneimage.jpg"
          }
        ],
        "example": {
          "url": "exampleimage.jpg",
          "details": "Les détails de l'exemple"
        }
      }
    ]
  }
]